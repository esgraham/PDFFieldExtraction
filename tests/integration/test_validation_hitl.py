#!/usr/bin/env python3
"""
Complete Validation and HITL Integration Example

Demonstrates the complete pipeline with:
- Advanced validation (regex, Luhn, date checks, cross-field consistency)
- HITL routing based on validation failures and confidence thresholds
- Teams notifications for review tasks
- Web-based review interface

Run with: python validation_hitl_example.py
"""

import asyncio
import sys
import uuid
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

try:
    from core.validation_engine import (
        ComprehensiveValidator, ValidationConfig, ValidationResult,
        ValidationSeverity, LuhnValidator, CrossFieldValidator
    )
    from hitl.hitl_review_app import HITLReviewApp, ReviewTask, ReviewStatus, ReviewPriority
    HAS_COMPONENTS = True
except ImportError as e:
    print(f"‚ö†Ô∏è  Import error: {e}")
    HAS_COMPONENTS = False

# Mock OCR result structure
class MockOCRResult:
    def __init__(self, extracted_fields: Dict[str, Any], confidence_scores: Dict[str, float]):
        self.extracted_fields = extracted_fields
        self.confidence_scores = confidence_scores

class EnhancedDocumentProcessor:
    """Enhanced document processor with validation and HITL integration."""
    
    def __init__(self, teams_webhook_url: str = None):
        if not HAS_COMPONENTS:
            print("‚ùå Required components not available")
            return
            
        self.validator = ComprehensiveValidator()
        self.hitl_app = HITLReviewApp(teams_webhook_url)
        
        # Processing statistics
        self.stats = {
            'documents_processed': 0,
            'validation_passed': 0,
            'hitl_routed': 0,
            'critical_errors': 0
        }
    
    async def process_document(self, document_id: str, document_type: str, 
                             ocr_result: MockOCRResult) -> Dict[str, Any]:
        """Process document with comprehensive validation and HITL routing."""
        
        print(f"\\nüîÑ Processing document: {document_id} ({document_type})")
        
        # Extract fields and confidence scores
        extracted_fields = ocr_result.extracted_fields
        confidence_scores = ocr_result.confidence_scores
        
        print(f"üìä Extracted {len(extracted_fields)} fields")
        
        # Create field validation configurations
        field_configs = self._create_field_configs(document_type, extracted_fields)
        
        # Perform comprehensive validation
        validation_results = self.validator.validate_document(
            extracted_fields, field_configs
        )\n        \n        # Check for validation failures\n        validation_errors = [r for r in validation_results if not r.is_valid]\n        critical_errors = [r for r in validation_errors if r.severity == ValidationSeverity.ERROR]\n        \n        print(f\"‚úÖ Validation completed: {len(validation_results)} checks, {len(validation_errors)} errors\")\n        \n        # Determine HITL routing\n        should_route, reasons = self.validator.should_route_to_hitl(\n            validation_results, confidence_scores, confidence_threshold=0.75\n        )\n        \n        # Update statistics\n        self.stats['documents_processed'] += 1\n        if not should_route:\n            self.stats['validation_passed'] += 1\n        else:\n            self.stats['hitl_routed'] += 1\n        if critical_errors:\n            self.stats['critical_errors'] += 1\n        \n        # Route to HITL if needed\n        hitl_task = None\n        if should_route:\n            hitl_task = await self._create_hitl_task(\n                document_id, document_type, extracted_fields, \n                validation_errors, confidence_scores, reasons\n            )\n            \n            # Add task to HITL review queue\n            await self.hitl_app.add_review_task(hitl_task)\n            print(f\"üìã Document routed to HITL queue: {hitl_task.task_id}\")\n        \n        return {\n            'document_id': document_id,\n            'processing_status': 'hitl_required' if should_route else 'completed',\n            'extracted_fields': extracted_fields,\n            'validation_results': [{\n                'field': r.field_name,\n                'valid': r.is_valid,\n                'severity': r.severity.value,\n                'message': r.message,\n                'rule': r.rule_name\n            } for r in validation_results],\n            'confidence_scores': confidence_scores,\n            'hitl_task_id': hitl_task.task_id if hitl_task else None,\n            'hitl_reasons': reasons if should_route else []\n        }\n    \n    def _create_field_configs(self, document_type: str, extracted_fields: Dict[str, Any]) -> Dict[str, ValidationConfig]:\n        \"\"\"Create validation configurations based on document type and fields.\"\"\"\n        configs = {}\n        \n        for field_name in extracted_fields.keys():\n            config = ValidationConfig()\n            \n            # Common field patterns\n            if 'invoice_number' in field_name.lower() or 'po_number' in field_name.lower():\n                config.required = True\n                config.patterns = [r'^[A-Za-z0-9\\-_]{3,20}$']\n                \n            elif 'date' in field_name.lower():\n                config.required = True\n                config.date_formats = ['%Y-%m-%d', '%m/%d/%Y', '%d/%m/%Y', '%B %d, %Y']\n                \n            elif 'amount' in field_name.lower() or 'total' in field_name.lower():\n                config.required = True\n                config.patterns = [r'^\\$?[0-9]{1,3}(?:,?[0-9]{3})*(?:\\.[0-9]{2})?$']\n                \n            elif 'email' in field_name.lower():\n                config.patterns = [r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$']\n                \n            elif 'phone' in field_name.lower():\n                config.patterns = [r'^[\\+]?[1-9]?[0-9]{7,15}$']\n                \n            elif 'account' in field_name.lower() and 'number' in field_name.lower():\n                config.luhn_check = True\n                config.patterns = [r'^[0-9]{8,17}$']\n                \n            elif 'ssn' in field_name.lower():\n                config.patterns = [r'^\\d{3}-?\\d{2}-?\\d{4}$']\n                \n            elif 'ein' in field_name.lower():\n                config.patterns = [r'^\\d{2}-?\\d{7}$']\n            \n            # Document-specific requirements\n            if document_type == 'invoice':\n                if field_name in ['invoice_number', 'invoice_date', 'total_amount', 'vendor_name']:\n                    config.required = True\n                    \n            elif document_type == 'receipt':\n                if field_name in ['store_name', 'transaction_date', 'total_amount']:\n                    config.required = True\n                    \n            elif document_type == 'contract':\n                if field_name in ['contract_number', 'effective_date', 'party1_name', 'party2_name']:\n                    config.required = True\n            \n            configs[field_name] = config\n        \n        return configs\n    \n    async def _create_hitl_task(self, document_id: str, document_type: str,\n                               extracted_fields: Dict[str, Any], validation_errors: List[ValidationResult],\n                               confidence_scores: Dict[str, float], reasons: List[str]) -> ReviewTask:\n        \"\"\"Create HITL review task.\"\"\"\n        \n        # Determine priority based on error types and confidence\n        priority = ReviewPriority.LOW\n        \n        critical_errors = [e for e in validation_errors if e.severity == ValidationSeverity.ERROR]\n        low_confidence_count = sum(1 for score in confidence_scores.values() if score < 0.6)\n        \n        if critical_errors or low_confidence_count > 2:\n            priority = ReviewPriority.HIGH\n        elif validation_errors or low_confidence_count > 0:\n            priority = ReviewPriority.MEDIUM\n        \n        # Create task\n        task = ReviewTask(\n            task_id=str(uuid.uuid4()),\n            document_id=document_id,\n            document_type=document_type,\n            status=ReviewStatus.PENDING,\n            priority=priority,\n            created_at=datetime.now(),\n            extracted_fields=extracted_fields,\n            validation_errors=[{\n                'field': e.field_name,\n                'message': e.message,\n                'severity': e.severity.value,\n                'rule': e.rule_name\n            } for e in validation_errors],\n            confidence_scores=confidence_scores,\n            source_system='document_processor',\n            processing_metadata={\n                'hitl_reasons': reasons,\n                'total_fields': len(extracted_fields),\n                'failed_validations': len(validation_errors)\n            }\n        )\n        \n        return task\n    \n    def print_statistics(self):\n        \"\"\"Print processing statistics.\"\"\"\n        print(\"\\nüìà Processing Statistics:\")\n        print(f\"  Documents processed: {self.stats['documents_processed']}\")\n        print(f\"  Validation passed: {self.stats['validation_passed']}\")\n        print(f\"  HITL routed: {self.stats['hitl_routed']}\")\n        print(f\"  Critical errors: {self.stats['critical_errors']}\")\n        \n        if self.stats['documents_processed'] > 0:\n            hitl_rate = (self.stats['hitl_routed'] / self.stats['documents_processed']) * 100\n            print(f\"  HITL routing rate: {hitl_rate:.1f}%\")\n\nasync def demonstrate_validation_system():\n    \"\"\"Demonstrate the complete validation and HITL system.\"\"\"\n    \n    if not HAS_COMPONENTS:\n        print(\"‚ùå Cannot run demonstration - required components not available\")\n        return\n    \n    print(\"üöÄ Enhanced Validation and HITL System Demonstration\")\n    print(\"=\" * 60)\n    \n    # Initialize processor (replace with actual Teams webhook URL)\n    teams_webhook = \"https://your-tenant.webhook.office.com/webhookb2/...\"  # Replace with real URL\n    processor = EnhancedDocumentProcessor(teams_webhook)\n    \n    # Test documents with various validation scenarios\n    test_documents = [\n        {\n            'document_id': 'INV-2024-001',\n            'document_type': 'invoice',\n            'ocr_result': MockOCRResult(\n                extracted_fields={\n                    'invoice_number': 'INV-2024-001',\n                    'invoice_date': '2024-01-15',\n                    'due_date': '2024-02-15',\n                    'vendor_name': 'ABC Company',\n                    'total_amount': '$1,234.56',\n                    'subtotal': '$1,150.00',\n                    'tax': '$84.56'\n                },\n                confidence_scores={\n                    'invoice_number': 0.95,\n                    'invoice_date': 0.89,\n                    'due_date': 0.87,\n                    'vendor_name': 0.92,\n                    'total_amount': 0.78,  # Medium confidence\n                    'subtotal': 0.85,\n                    'tax': 0.82\n                }\n            )\n        },\n        {\n            'document_id': 'INV-2024-002',\n            'document_type': 'invoice',\n            'ocr_result': MockOCRResult(\n                extracted_fields={\n                    'invoice_number': 'INV-INVALID-!!!',  # Invalid format\n                    'invoice_date': '2024-01-30',\n                    'due_date': '2024-01-15',  # Due date before invoice date (business rule violation)\n                    'vendor_name': 'XYZ Corp',\n                    'total_amount': '$2,500.00',\n                    'subtotal': '$2,000.00',\n                    'tax': '$400.00'  # Tax calculation error (should be $500 for total to match)\n                },\n                confidence_scores={\n                    'invoice_number': 0.45,  # Low confidence\n                    'invoice_date': 0.92,\n                    'due_date': 0.55,  # Low confidence\n                    'vendor_name': 0.88,\n                    'total_amount': 0.91,\n                    'subtotal': 0.89,\n                    'tax': 0.67  # Low confidence\n                }\n            )\n        },\n        {\n            'document_id': 'RCP-2024-001',\n            'document_type': 'receipt',\n            'ocr_result': MockOCRResult(\n                extracted_fields={\n                    'store_name': 'Best Buy',\n                    'transaction_date': '2024-01-20',\n                    'total_amount': '$89.99',\n                    'payment_method': 'Credit Card',\n                    'account_number': '4532123456789012'  # Valid Luhn check digit\n                },\n                confidence_scores={\n                    'store_name': 0.94,\n                    'transaction_date': 0.91,\n                    'total_amount': 0.96,\n                    'payment_method': 0.87,\n                    'account_number': 0.82\n                }\n            )\n        },\n        {\n            'document_id': 'CONTRACT-2024-001',\n            'document_type': 'contract',\n            'ocr_result': MockOCRResult(\n                extracted_fields={\n                    'contract_number': 'C-2024-001',\n                    'effective_date': '2024-02-01',\n                    'expiration_date': '2025-01-31',\n                    'party1_name': 'Acme Corporation',\n                    'party2_name': '',  # Missing required field\n                    'contract_value': '$50,000.00',\n                    'party1_email': 'invalid-email-format'  # Invalid email\n                },\n                confidence_scores={\n                    'contract_number': 0.93,\n                    'effective_date': 0.89,\n                    'expiration_date': 0.91,\n                    'party1_name': 0.95,\n                    'party2_name': 0.20,  # Very low confidence for missing field\n                    'contract_value': 0.88,\n                    'party1_email': 0.65  # Low confidence\n                }\n            )\n        }\n    ]\n    \n    # Process each test document\n    for doc in test_documents:\n        result = await processor.process_document(\n            doc['document_id'],\n            doc['document_type'],\n            doc['ocr_result']\n        )\n        \n        print(f\"\\nüìä Processing Result for {doc['document_id']}:\")\n        print(f\"  Status: {result['processing_status']}\")\n        print(f\"  Fields extracted: {len(result['extracted_fields'])}\")\n        print(f\"  Validation checks: {len(result['validation_results'])}\")\n        \n        # Show validation results\n        validation_errors = [r for r in result['validation_results'] if not r['valid']]\n        if validation_errors:\n            print(f\"  ‚ùå Validation errors ({len(validation_errors)}):\")\n            for error in validation_errors[:3]:  # Show first 3\n                print(f\"    ‚Ä¢ {error['field']}: {error['message']}\")\n            if len(validation_errors) > 3:\n                print(f\"    ‚Ä¢ ... and {len(validation_errors) - 3} more errors\")\n        else:\n            print(\"  ‚úÖ All validations passed\")\n        \n        # Show confidence scores\n        low_confidence = {k: v for k, v in result['confidence_scores'].items() if v < 0.75}\n        if low_confidence:\n            print(f\"  ‚ö†Ô∏è  Low confidence fields ({len(low_confidence)}):\")\n            for field, score in list(low_confidence.items())[:3]:\n                print(f\"    ‚Ä¢ {field}: {score:.1%}\")\n        \n        # HITL routing info\n        if result['processing_status'] == 'hitl_required':\n            print(f\"  üîÑ HITL Task ID: {result['hitl_task_id']}\")\n            print(f\"  üìã Routing reasons: {', '.join(result['hitl_reasons'])}\")\n            print(f\"  üîó Review URL: http://localhost:8000/review/{result['hitl_task_id']}\")\n    \n    # Show overall statistics\n    processor.print_statistics()\n    \n    print(\"\\n\" + \"=\"*60)\n    print(\"üéØ Validation Rules Demonstrated:\")\n    print(\"  ‚úÖ Regex validation (invoice numbers, email formats)\")\n    print(\"  ‚úÖ Luhn algorithm validation (credit card/account numbers)\")\n    print(\"  ‚úÖ Date format and range validation\")\n    print(\"  ‚úÖ Cross-field consistency (date sequences, amount calculations)\")\n    print(\"  ‚úÖ Business rule validation (document-specific requirements)\")\n    print(\"  ‚úÖ Confidence threshold routing\")\n    print(\"  ‚úÖ HITL task creation and prioritization\")\n    print(\"  ‚úÖ Teams notification integration (if webhook configured)\")\n    \n    print(\"\\nüöÄ System Features:\")\n    print(\"  üìä Comprehensive validation engine with 10+ rule types\")\n    print(\"  üîÑ Automatic HITL routing based on validation failures\")\n    print(\"  üì± Microsoft Teams notifications for urgent reviews\")\n    print(\"  üåê Web-based review interface for human reviewers\")\n    print(\"  üìà Real-time statistics and monitoring\")\n    print(\"  üõ°Ô∏è  Poison queue pattern for robust error handling\")\n    \n    print(\"\\nüîß Next Steps:\")\n    print(\"  1. Configure Microsoft Teams webhook URL\")\n    print(\"  2. Install web dependencies: pip install fastapi uvicorn httpx\")\n    print(\"  3. Start HITL review app: python -m src.hitl_review_app\")\n    print(\"  4. Customize validation rules for your document types\")\n    print(\"  5. Set up production monitoring and alerting\")\n\nasync def demonstrate_specific_validations():\n    \"\"\"Demonstrate specific validation techniques.\"\"\"\n    \n    if not HAS_COMPONENTS:\n        return\n        \n    print(\"\\nüîç Specific Validation Demonstrations:\")\n    print(\"=\" * 40)\n    \n    # Luhn Algorithm demonstration\n    print(\"\\n1Ô∏è‚É£  Luhn Algorithm Validation:\")\n    test_numbers = [\n        ('4532123456789012', 'Valid Visa card'),\n        ('4532123456789013', 'Invalid Visa card (wrong check digit)'),\n        ('123456789', 'Invalid - too short'),\n        ('', 'Invalid - empty')\n    ]\n    \n    for number, description in test_numbers:\n        is_valid = LuhnValidator.validate(number)\n        status = \"‚úÖ VALID\" if is_valid else \"‚ùå INVALID\"\n        print(f\"  {number:<20} {description:<30} {status}\")\n    \n    # Cross-field validation demonstration\n    print(\"\\n2Ô∏è‚É£  Cross-Field Date Validation:\")\n    date_tests = [\n        ('2024-01-15', '2024-02-15', 'Invoice before due date', True),\n        ('2024-02-15', '2024-01-15', 'Due date before invoice', False),\n        ('2024-01-15', '2024-01-15', 'Same dates (allowed)', True)\n    ]\n    \n    for date1, date2, description, expected in date_tests:\n        result = CrossFieldValidator.validate_date_sequence(\n            date1, date2, 'invoice_date', 'due_date'\n        )\n        status = \"‚úÖ VALID\" if result.is_valid else \"‚ùå INVALID\"\n        print(f\"  {date1} ‚Üí {date2:<12} {description:<25} {status}\")\n        if not result.is_valid:\n            print(f\"    Reason: {result.message}\")\n    \n    # Amount consistency validation\n    print(\"\\n3Ô∏è‚É£  Amount Consistency Validation:\")\n    amount_tests = [\n        ({'subtotal': '100.00', 'tax': '8.50', 'total': '108.50'}, 'Correct calculation', True),\n        ({'subtotal': '100.00', 'tax': '8.50', 'total': '110.00'}, 'Incorrect total', False),\n        ({'subtotal': '250.00', 'tax': '21.25', 'total': '271.25'}, 'Correct calculation', True)\n    ]\n    \n    for amounts, description, expected in amount_tests:\n        result = CrossFieldValidator.validate_amount_consistency(\n            amounts, 'total = subtotal + tax'\n        )\n        status = \"‚úÖ VALID\" if result.is_valid else \"‚ùå INVALID\"\n        total_calc = f\"${amounts['subtotal']} + ${amounts['tax']} = ${amounts['total']}\"\n        print(f\"  {total_calc:<30} {description:<20} {status}\")\n        if not result.is_valid:\n            print(f\"    Issue: {result.message}\")\n\ndef main():\n    \"\"\"Main demonstration function.\"\"\"\n    \n    print(\"üîß PDF Field Extraction - Enhanced Validation & HITL Demo\")\n    print(\"=\" * 60)\n    \n    if not HAS_COMPONENTS:\n        print(\"‚ùå Required components not available.\")\n        print(\"\\nüì¶ To install missing dependencies:\")\n        print(\"   pip install python-dateutil phonenumbers email-validator validators\")\n        print(\"   pip install fastapi uvicorn httpx jinja2\")\n        print(\"\\nüîÑ Then run this demo again.\")\n        return\n    \n    # Run demonstrations\n    asyncio.run(demonstrate_validation_system())\n    asyncio.run(demonstrate_specific_validations())\n    \n    print(\"\\n‚ú® Demonstration completed!\")\n    print(\"\\nüìö Key Features Demonstrated:\")\n    print(\"  ‚Ä¢ Advanced validation rules (regex, Luhn, dates, cross-field)\")\n    print(\"  ‚Ä¢ Confidence-based HITL routing\")\n    print(\"  ‚Ä¢ Microsoft Teams integration\")\n    print(\"  ‚Ä¢ Web-based review interface\")\n    print(\"  ‚Ä¢ Comprehensive error handling\")\n\nif __name__ == \"__main__\":\n    main()"